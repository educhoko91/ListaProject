/*
* generated by Xtext
*/
package edu.upb.lp.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ListaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ProgramElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Program");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionDefinitionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFunctionDefinitionsFunctionDefinitionParserRuleCall_0_0 = (RuleCall)cFunctionDefinitionsAssignment_0.eContents().get(0);
		private final Assignment cEvaluationAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cEvaluationEvaluationParserRuleCall_1_0 = (RuleCall)cEvaluationAssignment_1.eContents().get(0);
		
		//Program returns ListaMM::Program:
		//	functionDefinitions+=FunctionDefinition* evaluation=Evaluation;
		public ParserRule getRule() { return rule; }

		//functionDefinitions+=FunctionDefinition* evaluation=Evaluation
		public Group getGroup() { return cGroup; }

		//functionDefinitions+=FunctionDefinition*
		public Assignment getFunctionDefinitionsAssignment_0() { return cFunctionDefinitionsAssignment_0; }

		//FunctionDefinition
		public RuleCall getFunctionDefinitionsFunctionDefinitionParserRuleCall_0_0() { return cFunctionDefinitionsFunctionDefinitionParserRuleCall_0_0; }

		//evaluation=Evaluation
		public Assignment getEvaluationAssignment_1() { return cEvaluationAssignment_1; }

		//Evaluation
		public RuleCall getEvaluationEvaluationParserRuleCall_1_0() { return cEvaluationEvaluationParserRuleCall_1_0; }
	}

	public class FunctionDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParametersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParametersIdentifierParserRuleCall_2_0 = (RuleCall)cParametersAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cParametersAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cParametersIdentifierParserRuleCall_3_1_0 = (RuleCall)cParametersAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cEqualsSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cExpressionAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cExpressionExpressionParserRuleCall_6_0 = (RuleCall)cExpressionAssignment_6.eContents().get(0);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//FunctionDefinition returns ListaMM::FunctionDefinition:
		//	name=ID "(" parameters+=Identifier ("," parameters+=Identifier)* ")" "=" expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//name=ID "(" parameters+=Identifier ("," parameters+=Identifier)* ")" "=" expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameters+=Identifier
		public Assignment getParametersAssignment_2() { return cParametersAssignment_2; }

		//Identifier
		public RuleCall getParametersIdentifierParserRuleCall_2_0() { return cParametersIdentifierParserRuleCall_2_0; }

		//("," parameters+=Identifier)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//parameters+=Identifier
		public Assignment getParametersAssignment_3_1() { return cParametersAssignment_3_1; }

		//Identifier
		public RuleCall getParametersIdentifierParserRuleCall_3_1_0() { return cParametersIdentifierParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//"="
		public Keyword getEqualsSignKeyword_5() { return cEqualsSignKeyword_5; }

		//expression=Expression
		public Assignment getExpressionAssignment_6() { return cExpressionAssignment_6; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_6_0() { return cExpressionExpressionParserRuleCall_6_0; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class EvaluationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Evaluation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//Evaluation returns ListaMM::Evaluation:
		//	"?" expression=Expression ";";
		public ParserRule getRule() { return rule; }

		//"?" expression=Expression ";"
		public Group getGroup() { return cGroup; }

		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }

		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }

		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }

		//";"
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//Identifier returns ListaMM::Identifier:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final RuleCall cLevel4ExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression returns ListaMM::Expression:
		//	Level4Expression;
		public ParserRule getRule() { return rule; }

		//Level4Expression
		public RuleCall getLevel4ExpressionParserRuleCall() { return cLevel4ExpressionParserRuleCall; }
	}

	public class Level4ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Level4Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLevel3ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompositeExprSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLevel4OperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsLevel4ExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//Level4Expression returns ListaMM::Expression:
		//	Level3Expression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level4Operator
		//	subExpressions+=Level4Expression)?;
		public ParserRule getRule() { return rule; }

		//Level3Expression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level4Operator
		//subExpressions+=Level4Expression)?
		public Group getGroup() { return cGroup; }

		//Level3Expression
		public RuleCall getLevel3ExpressionParserRuleCall_0() { return cLevel3ExpressionParserRuleCall_0; }

		//({ListaMM::CompositeExpr.subExpressions+=current} operator=Level4Operator subExpressions+=Level4Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ListaMM::CompositeExpr.subExpressions+=current}
		public Action getCompositeExprSubExpressionsAction_1_0() { return cCompositeExprSubExpressionsAction_1_0; }

		//operator=Level4Operator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Level4Operator
		public RuleCall getOperatorLevel4OperatorEnumRuleCall_1_1_0() { return cOperatorLevel4OperatorEnumRuleCall_1_1_0; }

		//subExpressions+=Level4Expression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//Level4Expression
		public RuleCall getSubExpressionsLevel4ExpressionParserRuleCall_1_2_0() { return cSubExpressionsLevel4ExpressionParserRuleCall_1_2_0; }
	}

	public class Level3ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Level3Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLevel2ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompositeExprSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLevel3OperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsLevel3ExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//Level3Expression returns ListaMM::Expression:
		//	Level2Expression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level3Operator
		//	subExpressions+=Level3Expression)?;
		public ParserRule getRule() { return rule; }

		//Level2Expression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level3Operator
		//subExpressions+=Level3Expression)?
		public Group getGroup() { return cGroup; }

		//Level2Expression
		public RuleCall getLevel2ExpressionParserRuleCall_0() { return cLevel2ExpressionParserRuleCall_0; }

		//({ListaMM::CompositeExpr.subExpressions+=current} operator=Level3Operator subExpressions+=Level3Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ListaMM::CompositeExpr.subExpressions+=current}
		public Action getCompositeExprSubExpressionsAction_1_0() { return cCompositeExprSubExpressionsAction_1_0; }

		//operator=Level3Operator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Level3Operator
		public RuleCall getOperatorLevel3OperatorEnumRuleCall_1_1_0() { return cOperatorLevel3OperatorEnumRuleCall_1_1_0; }

		//subExpressions+=Level3Expression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//Level3Expression
		public RuleCall getSubExpressionsLevel3ExpressionParserRuleCall_1_2_0() { return cSubExpressionsLevel3ExpressionParserRuleCall_1_2_0; }
	}

	public class Level2ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Level2Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cLevel1ExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompositeExprSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLevel2OperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsLevel2ExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//Level2Expression returns ListaMM::Expression:
		//	Level1Expression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level2Operator
		//	subExpressions+=Level2Expression)?;
		public ParserRule getRule() { return rule; }

		//Level1Expression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level2Operator
		//subExpressions+=Level2Expression)?
		public Group getGroup() { return cGroup; }

		//Level1Expression
		public RuleCall getLevel1ExpressionParserRuleCall_0() { return cLevel1ExpressionParserRuleCall_0; }

		//({ListaMM::CompositeExpr.subExpressions+=current} operator=Level2Operator subExpressions+=Level2Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ListaMM::CompositeExpr.subExpressions+=current}
		public Action getCompositeExprSubExpressionsAction_1_0() { return cCompositeExprSubExpressionsAction_1_0; }

		//operator=Level2Operator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Level2Operator
		public RuleCall getOperatorLevel2OperatorEnumRuleCall_1_1_0() { return cOperatorLevel2OperatorEnumRuleCall_1_1_0; }

		//subExpressions+=Level2Expression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//Level2Expression
		public RuleCall getSubExpressionsLevel2ExpressionParserRuleCall_1_2_0() { return cSubExpressionsLevel2ExpressionParserRuleCall_1_2_0; }
	}

	public class Level1ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Level1Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cSimpleExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cCompositeExprSubExpressionsAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOperatorLevel1OperatorEnumRuleCall_1_1_0 = (RuleCall)cOperatorAssignment_1_1.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cSubExpressionsLevel1ExpressionParserRuleCall_1_2_0 = (RuleCall)cSubExpressionsAssignment_1_2.eContents().get(0);
		
		//Level1Expression returns ListaMM::Expression:
		//	SimpleExpression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level1Operator
		//	subExpressions+=Level1Expression)?;
		public ParserRule getRule() { return rule; }

		//SimpleExpression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level1Operator
		//subExpressions+=Level1Expression)?
		public Group getGroup() { return cGroup; }

		//SimpleExpression
		public RuleCall getSimpleExpressionParserRuleCall_0() { return cSimpleExpressionParserRuleCall_0; }

		//({ListaMM::CompositeExpr.subExpressions+=current} operator=Level1Operator subExpressions+=Level1Expression)?
		public Group getGroup_1() { return cGroup_1; }

		//{ListaMM::CompositeExpr.subExpressions+=current}
		public Action getCompositeExprSubExpressionsAction_1_0() { return cCompositeExprSubExpressionsAction_1_0; }

		//operator=Level1Operator
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }

		//Level1Operator
		public RuleCall getOperatorLevel1OperatorEnumRuleCall_1_1_0() { return cOperatorLevel1OperatorEnumRuleCall_1_1_0; }

		//subExpressions+=Level1Expression
		public Assignment getSubExpressionsAssignment_1_2() { return cSubExpressionsAssignment_1_2; }

		//Level1Expression
		public RuleCall getSubExpressionsLevel1ExpressionParserRuleCall_1_2_0() { return cSubExpressionsLevel1ExpressionParserRuleCall_1_2_0; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSeqExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cNumberExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cStringExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cFunctionCallParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cIdentifierParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cIfExpressionParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cNotExpressionParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		private final RuleCall cInputExpressionParserRuleCall_8 = (RuleCall)cAlternatives.eContents().get(8);
		private final RuleCall cOutputExpressionParserRuleCall_9 = (RuleCall)cAlternatives.eContents().get(9);
		private final Group cGroup_10 = (Group)cAlternatives.eContents().get(10);
		private final Keyword cLeftParenthesisKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_10_1 = (RuleCall)cGroup_10.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_10_2 = (Keyword)cGroup_10.eContents().get(2);
		private final RuleCall cMapExpressionParserRuleCall_11 = (RuleCall)cAlternatives.eContents().get(11);
		private final RuleCall cPutExpressionParserRuleCall_12 = (RuleCall)cAlternatives.eContents().get(12);
		private final RuleCall cRemoveExpressionParserRuleCall_13 = (RuleCall)cAlternatives.eContents().get(13);
		private final RuleCall cGetExpressionParserRuleCall_14 = (RuleCall)cAlternatives.eContents().get(14);
		
		//SimpleExpression returns ListaMM::Expression:
		//	SeqExpression | BooleanExpression | NumberExpression | StringExpression | FunctionCall | Identifier | IfExpression |
		//	NotExpression | InputExpression | OutputExpression | "(" Expression ")" | MapExpression | PutExpression |
		//	RemoveExpression | GetExpression;
		public ParserRule getRule() { return rule; }

		//SeqExpression | BooleanExpression | NumberExpression | StringExpression | FunctionCall | Identifier | IfExpression |
		//NotExpression | InputExpression | OutputExpression | "(" Expression ")" | MapExpression | PutExpression |
		//RemoveExpression | GetExpression
		public Alternatives getAlternatives() { return cAlternatives; }

		//SeqExpression
		public RuleCall getSeqExpressionParserRuleCall_0() { return cSeqExpressionParserRuleCall_0; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_1() { return cBooleanExpressionParserRuleCall_1; }

		//NumberExpression
		public RuleCall getNumberExpressionParserRuleCall_2() { return cNumberExpressionParserRuleCall_2; }

		//StringExpression
		public RuleCall getStringExpressionParserRuleCall_3() { return cStringExpressionParserRuleCall_3; }

		//FunctionCall
		public RuleCall getFunctionCallParserRuleCall_4() { return cFunctionCallParserRuleCall_4; }

		//Identifier
		public RuleCall getIdentifierParserRuleCall_5() { return cIdentifierParserRuleCall_5; }

		//IfExpression
		public RuleCall getIfExpressionParserRuleCall_6() { return cIfExpressionParserRuleCall_6; }

		//NotExpression
		public RuleCall getNotExpressionParserRuleCall_7() { return cNotExpressionParserRuleCall_7; }

		//InputExpression
		public RuleCall getInputExpressionParserRuleCall_8() { return cInputExpressionParserRuleCall_8; }

		//OutputExpression
		public RuleCall getOutputExpressionParserRuleCall_9() { return cOutputExpressionParserRuleCall_9; }

		//"(" Expression ")"
		public Group getGroup_10() { return cGroup_10; }

		//"("
		public Keyword getLeftParenthesisKeyword_10_0() { return cLeftParenthesisKeyword_10_0; }

		//Expression
		public RuleCall getExpressionParserRuleCall_10_1() { return cExpressionParserRuleCall_10_1; }

		//")"
		public Keyword getRightParenthesisKeyword_10_2() { return cRightParenthesisKeyword_10_2; }

		//MapExpression
		public RuleCall getMapExpressionParserRuleCall_11() { return cMapExpressionParserRuleCall_11; }

		//PutExpression
		public RuleCall getPutExpressionParserRuleCall_12() { return cPutExpressionParserRuleCall_12; }

		//RemoveExpression
		public RuleCall getRemoveExpressionParserRuleCall_13() { return cRemoveExpressionParserRuleCall_13; }

		//GetExpression
		public RuleCall getGetExpressionParserRuleCall_14() { return cGetExpressionParserRuleCall_14; }
	}

	public class InputExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InputExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMessageAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cMessageSTRINGTerminalRuleCall_2_0 = (RuleCall)cMessageAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//InputExpression returns ListaMM::InputExpression:
		//	"input" "(" message=STRING ")";
		public ParserRule getRule() { return rule; }

		//"input" "(" message=STRING ")"
		public Group getGroup() { return cGroup; }

		//"input"
		public Keyword getInputKeyword_0() { return cInputKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//message=STRING
		public Assignment getMessageAssignment_2() { return cMessageAssignment_2; }

		//STRING
		public RuleCall getMessageSTRINGTerminalRuleCall_2_0() { return cMessageSTRINGTerminalRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class OutputExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OutputExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutputKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cParameterExpressionParserRuleCall_2_0 = (RuleCall)cParameterAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//OutputExpression returns ListaMM::OutputExpression:
		//	"output" "(" parameter=Expression ")";
		public ParserRule getRule() { return rule; }

		//"output" "(" parameter=Expression ")"
		public Group getGroup() { return cGroup; }

		//"output"
		public Keyword getOutputKeyword_0() { return cOutputKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//parameter=Expression
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }

		//Expression
		public RuleCall getParameterExpressionParserRuleCall_2_0() { return cParameterExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class IfExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cCondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCondExpressionParserRuleCall_2_0 = (RuleCall)cCondAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConsequentAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConsequentExpressionParserRuleCall_4_0 = (RuleCall)cConsequentAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAlternativeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAlternativeExpressionParserRuleCall_6_0 = (RuleCall)cAlternativeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//IfExpression returns ListaMM::IfExpression:
		//	"if" "(" cond=Expression "," consequent=Expression "," alternative=Expression ")";
		public ParserRule getRule() { return rule; }

		//"if" "(" cond=Expression "," consequent=Expression "," alternative=Expression ")"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//cond=Expression
		public Assignment getCondAssignment_2() { return cCondAssignment_2; }

		//Expression
		public RuleCall getCondExpressionParserRuleCall_2_0() { return cCondExpressionParserRuleCall_2_0; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//consequent=Expression
		public Assignment getConsequentAssignment_4() { return cConsequentAssignment_4; }

		//Expression
		public RuleCall getConsequentExpressionParserRuleCall_4_0() { return cConsequentExpressionParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//alternative=Expression
		public Assignment getAlternativeAssignment_6() { return cAlternativeAssignment_6; }

		//Expression
		public RuleCall getAlternativeExpressionParserRuleCall_6_0() { return cAlternativeExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class FunctionCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FunctionCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFunctionFunctionDefinitionCrossReference_0_0 = (CrossReference)cFunctionAssignment_0.eContents().get(0);
		private final RuleCall cFunctionFunctionDefinitionIDTerminalRuleCall_0_0_1 = (RuleCall)cFunctionFunctionDefinitionCrossReference_0_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgumentsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_0_0 = (RuleCall)cArgumentsAssignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cGroup_2.eContents().get(1);
		private final Keyword cCommaKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cArgumentsAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cArgumentsExpressionParserRuleCall_2_1_1_0 = (RuleCall)cArgumentsAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//FunctionCall returns ListaMM::FunctionCall:
		//	function=[ListaMM::FunctionDefinition] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
		public ParserRule getRule() { return rule; }

		//function=[ListaMM::FunctionDefinition] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")"
		public Group getGroup() { return cGroup; }

		//function=[ListaMM::FunctionDefinition]
		public Assignment getFunctionAssignment_0() { return cFunctionAssignment_0; }

		//[ListaMM::FunctionDefinition]
		public CrossReference getFunctionFunctionDefinitionCrossReference_0_0() { return cFunctionFunctionDefinitionCrossReference_0_0; }

		//ID
		public RuleCall getFunctionFunctionDefinitionIDTerminalRuleCall_0_0_1() { return cFunctionFunctionDefinitionIDTerminalRuleCall_0_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(arguments+=Expression ("," arguments+=Expression)*)?
		public Group getGroup_2() { return cGroup_2; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_0() { return cArgumentsAssignment_2_0; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_0_0() { return cArgumentsExpressionParserRuleCall_2_0_0; }

		//("," arguments+=Expression)*
		public Group getGroup_2_1() { return cGroup_2_1; }

		//","
		public Keyword getCommaKeyword_2_1_0() { return cCommaKeyword_2_1_0; }

		//arguments+=Expression
		public Assignment getArgumentsAssignment_2_1_1() { return cArgumentsAssignment_2_1_1; }

		//Expression
		public RuleCall getArgumentsExpressionParserRuleCall_2_1_1_0() { return cArgumentsExpressionParserRuleCall_2_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}

	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringExpression");
		private final Assignment cStringAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStringSTRINGTerminalRuleCall_0 = (RuleCall)cStringAssignment.eContents().get(0);
		
		//StringExpression returns ListaMM::StringExpression:
		//	string+=STRING;
		public ParserRule getRule() { return rule; }

		//string+=STRING
		public Assignment getStringAssignment() { return cStringAssignment; }

		//STRING
		public RuleCall getStringSTRINGTerminalRuleCall_0() { return cStringSTRINGTerminalRuleCall_0; }
	}

	public class NotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSubExprAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSubExprSimpleExpressionParserRuleCall_1_0 = (RuleCall)cSubExprAssignment_1.eContents().get(0);
		
		//NotExpression returns ListaMM::NegExpr:
		//	"!" subExpr=SimpleExpression;
		public ParserRule getRule() { return rule; }

		//"!" subExpr=SimpleExpression
		public Group getGroup() { return cGroup; }

		//"!"
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }

		//subExpr=SimpleExpression
		public Assignment getSubExprAssignment_1() { return cSubExprAssignment_1; }

		//SimpleExpression
		public RuleCall getSubExprSimpleExpressionParserRuleCall_1_0() { return cSubExprSimpleExpressionParserRuleCall_1_0; }
	}

	public class NumberExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NumberExpression");
		private final Assignment cNumberAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNumberINTTerminalRuleCall_0 = (RuleCall)cNumberAssignment.eContents().get(0);
		
		//NumberExpression returns ListaMM::NumberExpression:
		//	number=INT;
		public ParserRule getRule() { return rule; }

		//number=INT
		public Assignment getNumberAssignment() { return cNumberAssignment; }

		//INT
		public RuleCall getNumberINTTerminalRuleCall_0() { return cNumberINTTerminalRuleCall_0; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTRUEKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFALSEKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BooleanExpression returns ListaMM::BooleanExpression:
		//	{ListaMM::BooleanExpression} (value?="TRUE" | "FALSE");
		public ParserRule getRule() { return rule; }

		//{ListaMM::BooleanExpression} (value?="TRUE" | "FALSE")
		public Group getGroup() { return cGroup; }

		//{ListaMM::BooleanExpression}
		public Action getBooleanExpressionAction_0() { return cBooleanExpressionAction_0; }

		//value?="TRUE" | "FALSE"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value?="TRUE"
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//"TRUE"
		public Keyword getValueTRUEKeyword_1_0_0() { return cValueTRUEKeyword_1_0_0; }

		//"FALSE"
		public Keyword getFALSEKeyword_1_1() { return cFALSEKeyword_1_1; }
	}

	public class SeqExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SeqExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSeqKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cSubExpressionsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cSubExpressionsExpressionParserRuleCall_2_0 = (RuleCall)cSubExpressionsAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCommaKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSubExpressionsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSubExpressionsExpressionParserRuleCall_3_1_0 = (RuleCall)cSubExpressionsAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//SeqExpression returns ListaMM::SeqExpression:
		//	"seq" "(" subExpressions+=Expression ("," subExpressions+=Expression)* ")";
		public ParserRule getRule() { return rule; }

		//"seq" "(" subExpressions+=Expression ("," subExpressions+=Expression)* ")"
		public Group getGroup() { return cGroup; }

		//"seq"
		public Keyword getSeqKeyword_0() { return cSeqKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//subExpressions+=Expression
		public Assignment getSubExpressionsAssignment_2() { return cSubExpressionsAssignment_2; }

		//Expression
		public RuleCall getSubExpressionsExpressionParserRuleCall_2_0() { return cSubExpressionsExpressionParserRuleCall_2_0; }

		//("," subExpressions+=Expression)*
		public Group getGroup_3() { return cGroup_3; }

		//","
		public Keyword getCommaKeyword_3_0() { return cCommaKeyword_3_0; }

		//subExpressions+=Expression
		public Assignment getSubExpressionsAssignment_3_1() { return cSubExpressionsAssignment_3_1; }

		//Expression
		public RuleCall getSubExpressionsExpressionParserRuleCall_3_1_0() { return cSubExpressionsExpressionParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
	}

	public class MapExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "MapExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cKeyTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final Alternatives cKeyTypeAlternatives_2_0 = (Alternatives)cKeyTypeAssignment_2.eContents().get(0);
		private final Keyword cKeyTypeStringKeyword_2_0_0 = (Keyword)cKeyTypeAlternatives_2_0.eContents().get(0);
		private final Keyword cKeyTypeIntKeyword_2_0_1 = (Keyword)cKeyTypeAlternatives_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cValueTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cValueTypeAlternatives_4_0 = (Alternatives)cValueTypeAssignment_4.eContents().get(0);
		private final Keyword cValueTypeStringKeyword_4_0_0 = (Keyword)cValueTypeAlternatives_4_0.eContents().get(0);
		private final Keyword cValueTypeIntKeyword_4_0_1 = (Keyword)cValueTypeAlternatives_4_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cEqualsSignKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cLeftCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cValuesAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cValuesPairExprParserRuleCall_8_0_0 = (RuleCall)cValuesAssignment_8_0.eContents().get(0);
		private final Group cGroup_8_1 = (Group)cGroup_8.eContents().get(1);
		private final Keyword cCommaKeyword_8_1_0 = (Keyword)cGroup_8_1.eContents().get(0);
		private final Assignment cValuesAssignment_8_1_1 = (Assignment)cGroup_8_1.eContents().get(1);
		private final RuleCall cValuesPairExprParserRuleCall_8_1_1_0 = (RuleCall)cValuesAssignment_8_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//MapExpression returns ListaMM::MapExpression:
		//	name=ID "[" keyType=("String" | "Int") "," valueType=("String" | "Int") "]" "=" "{" (values+=PairExpr (","
		//	values+=PairExpr)*)? "}";
		public ParserRule getRule() { return rule; }

		//name=ID "[" keyType=("String" | "Int") "," valueType=("String" | "Int") "]" "=" "{" (values+=PairExpr (","
		//values+=PairExpr)*)? "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1() { return cLeftSquareBracketKeyword_1; }

		//keyType=("String" | "Int")
		public Assignment getKeyTypeAssignment_2() { return cKeyTypeAssignment_2; }

		//"String" | "Int"
		public Alternatives getKeyTypeAlternatives_2_0() { return cKeyTypeAlternatives_2_0; }

		//"String"
		public Keyword getKeyTypeStringKeyword_2_0_0() { return cKeyTypeStringKeyword_2_0_0; }

		//"Int"
		public Keyword getKeyTypeIntKeyword_2_0_1() { return cKeyTypeIntKeyword_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//valueType=("String" | "Int")
		public Assignment getValueTypeAssignment_4() { return cValueTypeAssignment_4; }

		//"String" | "Int"
		public Alternatives getValueTypeAlternatives_4_0() { return cValueTypeAlternatives_4_0; }

		//"String"
		public Keyword getValueTypeStringKeyword_4_0_0() { return cValueTypeStringKeyword_4_0_0; }

		//"Int"
		public Keyword getValueTypeIntKeyword_4_0_1() { return cValueTypeIntKeyword_4_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_5() { return cRightSquareBracketKeyword_5; }

		//"="
		public Keyword getEqualsSignKeyword_6() { return cEqualsSignKeyword_6; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_7() { return cLeftCurlyBracketKeyword_7; }

		//(values+=PairExpr ("," values+=PairExpr)*)?
		public Group getGroup_8() { return cGroup_8; }

		//values+=PairExpr
		public Assignment getValuesAssignment_8_0() { return cValuesAssignment_8_0; }

		//PairExpr
		public RuleCall getValuesPairExprParserRuleCall_8_0_0() { return cValuesPairExprParserRuleCall_8_0_0; }

		//("," values+=PairExpr)*
		public Group getGroup_8_1() { return cGroup_8_1; }

		//","
		public Keyword getCommaKeyword_8_1_0() { return cCommaKeyword_8_1_0; }

		//values+=PairExpr
		public Assignment getValuesAssignment_8_1_1() { return cValuesAssignment_8_1_1; }

		//PairExpr
		public RuleCall getValuesPairExprParserRuleCall_8_1_1_0() { return cValuesPairExprParserRuleCall_8_1_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}

	public class PairExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PairExpr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cKeyAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cKeyExpressionParserRuleCall_0_0 = (RuleCall)cKeyAssignment_0.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueExpressionParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//PairExpr returns ListaMM::Pair:
		//	key=Expression "->" value=Expression;
		public ParserRule getRule() { return rule; }

		//key=Expression "->" value=Expression
		public Group getGroup() { return cGroup; }

		//key=Expression
		public Assignment getKeyAssignment_0() { return cKeyAssignment_0; }

		//Expression
		public RuleCall getKeyExpressionParserRuleCall_0_0() { return cKeyExpressionParserRuleCall_0_0; }

		//"->"
		public Keyword getHyphenMinusGreaterThanSignKeyword_1() { return cHyphenMinusGreaterThanSignKeyword_1; }

		//value=Expression
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//Expression
		public RuleCall getValueExpressionParserRuleCall_2_0() { return cValueExpressionParserRuleCall_2_0; }
	}

	public class PutExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PutExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMapMapExpressionCrossReference_2_0 = (CrossReference)cMapAssignment_2.eContents().get(0);
		private final RuleCall cMapMapExpressionIDTerminalRuleCall_2_0_1 = (RuleCall)cMapMapExpressionCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKeyExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeyExprExpressionParserRuleCall_4_0 = (RuleCall)cKeyExprAssignment_4.eContents().get(0);
		private final Keyword cCommaKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValExprAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValExprExpressionParserRuleCall_6_0 = (RuleCall)cValExprAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PutExpression returns ListaMM::PutExpression:
		//	"put" "(" Map=[ListaMM::MapExpression] "," keyExpr=Expression "," valExpr=Expression ")";
		public ParserRule getRule() { return rule; }

		//"put" "(" Map=[ListaMM::MapExpression] "," keyExpr=Expression "," valExpr=Expression ")"
		public Group getGroup() { return cGroup; }

		//"put"
		public Keyword getPutKeyword_0() { return cPutKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//Map=[ListaMM::MapExpression]
		public Assignment getMapAssignment_2() { return cMapAssignment_2; }

		//[ListaMM::MapExpression]
		public CrossReference getMapMapExpressionCrossReference_2_0() { return cMapMapExpressionCrossReference_2_0; }

		//ID
		public RuleCall getMapMapExpressionIDTerminalRuleCall_2_0_1() { return cMapMapExpressionIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//keyExpr=Expression
		public Assignment getKeyExprAssignment_4() { return cKeyExprAssignment_4; }

		//Expression
		public RuleCall getKeyExprExpressionParserRuleCall_4_0() { return cKeyExprExpressionParserRuleCall_4_0; }

		//","
		public Keyword getCommaKeyword_5() { return cCommaKeyword_5; }

		//valExpr=Expression
		public Assignment getValExprAssignment_6() { return cValExprAssignment_6; }

		//Expression
		public RuleCall getValExprExpressionParserRuleCall_6_0() { return cValExprExpressionParserRuleCall_6_0; }

		//")"
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}

	public class GetExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GetExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGetKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMapMapExpressionCrossReference_2_0 = (CrossReference)cMapAssignment_2.eContents().get(0);
		private final RuleCall cMapMapExpressionIDTerminalRuleCall_2_0_1 = (RuleCall)cMapMapExpressionCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKeyExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeyExprExpressionParserRuleCall_4_0 = (RuleCall)cKeyExprAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//GetExpression returns ListaMM::GetExpression:
		//	"get" "(" Map=[ListaMM::MapExpression] "," keyExpr=Expression ")";
		public ParserRule getRule() { return rule; }

		//"get" "(" Map=[ListaMM::MapExpression] "," keyExpr=Expression ")"
		public Group getGroup() { return cGroup; }

		//"get"
		public Keyword getGetKeyword_0() { return cGetKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//Map=[ListaMM::MapExpression]
		public Assignment getMapAssignment_2() { return cMapAssignment_2; }

		//[ListaMM::MapExpression]
		public CrossReference getMapMapExpressionCrossReference_2_0() { return cMapMapExpressionCrossReference_2_0; }

		//ID
		public RuleCall getMapMapExpressionIDTerminalRuleCall_2_0_1() { return cMapMapExpressionIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//keyExpr=Expression
		public Assignment getKeyExprAssignment_4() { return cKeyExprAssignment_4; }

		//Expression
		public RuleCall getKeyExprExpressionParserRuleCall_4_0() { return cKeyExprExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}

	public class RemoveExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RemoveExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMapAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMapMapExpressionCrossReference_2_0 = (CrossReference)cMapAssignment_2.eContents().get(0);
		private final RuleCall cMapMapExpressionIDTerminalRuleCall_2_0_1 = (RuleCall)cMapMapExpressionCrossReference_2_0.eContents().get(1);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cKeyExprAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cKeyExprExpressionParserRuleCall_4_0 = (RuleCall)cKeyExprAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//RemoveExpression returns ListaMM::RemoveExpression:
		//	"remove" "(" Map=[ListaMM::MapExpression] "," keyExpr=Expression ")";
		public ParserRule getRule() { return rule; }

		//"remove" "(" Map=[ListaMM::MapExpression] "," keyExpr=Expression ")"
		public Group getGroup() { return cGroup; }

		//"remove"
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//Map=[ListaMM::MapExpression]
		public Assignment getMapAssignment_2() { return cMapAssignment_2; }

		//[ListaMM::MapExpression]
		public CrossReference getMapMapExpressionCrossReference_2_0() { return cMapMapExpressionCrossReference_2_0; }

		//ID
		public RuleCall getMapMapExpressionIDTerminalRuleCall_2_0_1() { return cMapMapExpressionIDTerminalRuleCall_2_0_1; }

		//","
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }

		//keyExpr=Expression
		public Assignment getKeyExprAssignment_4() { return cKeyExprAssignment_4; }

		//Expression
		public RuleCall getKeyExprExpressionParserRuleCall_4_0() { return cKeyExprExpressionParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	
	
	public class Level1OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Level1Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cTIMESEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cTIMESAsteriskKeyword_0_0 = (Keyword)cTIMESEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDIVIDEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDIVIDESolidusKeyword_1_0 = (Keyword)cDIVIDEEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cCONCATEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cCONCATColonColonKeyword_2_0 = (Keyword)cCONCATEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cANDAmpersandKeyword_3_0 = (Keyword)cANDEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cORVerticalLineKeyword_4_0 = (Keyword)cOREnumLiteralDeclaration_4.eContents().get(0);
		
		////Priorities: mult divide concat > plus minus > smaller > equals
		//enum Level1Operator returns ListaMM::Operator:
		//	TIMES="*" | DIVIDE="/" | CONCAT="::" | AND="&" | OR="|";
		public EnumRule getRule() { return rule; }

		//TIMES="*" | DIVIDE="/" | CONCAT="::" | AND="&" | OR="|"
		public Alternatives getAlternatives() { return cAlternatives; }

		//TIMES="*"
		public EnumLiteralDeclaration getTIMESEnumLiteralDeclaration_0() { return cTIMESEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getTIMESAsteriskKeyword_0_0() { return cTIMESAsteriskKeyword_0_0; }

		//DIVIDE="/"
		public EnumLiteralDeclaration getDIVIDEEnumLiteralDeclaration_1() { return cDIVIDEEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDIVIDESolidusKeyword_1_0() { return cDIVIDESolidusKeyword_1_0; }

		//CONCAT="::"
		public EnumLiteralDeclaration getCONCATEnumLiteralDeclaration_2() { return cCONCATEnumLiteralDeclaration_2; }

		//"::"
		public Keyword getCONCATColonColonKeyword_2_0() { return cCONCATColonColonKeyword_2_0; }

		//AND="&"
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_3() { return cANDEnumLiteralDeclaration_3; }

		//"&"
		public Keyword getANDAmpersandKeyword_3_0() { return cANDAmpersandKeyword_3_0; }

		//OR="|"
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_4() { return cOREnumLiteralDeclaration_4; }

		//"|"
		public Keyword getORVerticalLineKeyword_4_0() { return cORVerticalLineKeyword_4_0; }
	}

	public class Level2OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Level2Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMINUSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMINUSHyphenMinusKeyword_0_0 = (Keyword)cMINUSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cPLUSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cPLUSPlusSignKeyword_1_0 = (Keyword)cPLUSEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Level2Operator returns ListaMM::Operator:
		//	MINUS="-" | PLUS="+";
		public EnumRule getRule() { return rule; }

		//MINUS="-" | PLUS="+"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MINUS="-"
		public EnumLiteralDeclaration getMINUSEnumLiteralDeclaration_0() { return cMINUSEnumLiteralDeclaration_0; }

		//"-"
		public Keyword getMINUSHyphenMinusKeyword_0_0() { return cMINUSHyphenMinusKeyword_0_0; }

		//PLUS="+"
		public EnumLiteralDeclaration getPLUSEnumLiteralDeclaration_1() { return cPLUSEnumLiteralDeclaration_1; }

		//"+"
		public Keyword getPLUSPlusSignKeyword_1_0() { return cPLUSPlusSignKeyword_1_0; }
	}

	public class Level3OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Level3Operator");
		private final EnumLiteralDeclaration cSMALLERTHANEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSMALLERTHANLessThanSignKeyword_0 = (Keyword)cSMALLERTHANEnumLiteralDeclaration.eContents().get(0);
		
		//enum Level3Operator returns ListaMM::Operator:
		//	SMALLERTHAN="<";
		public EnumRule getRule() { return rule; }

		//SMALLERTHAN="<"
		public EnumLiteralDeclaration getSMALLERTHANEnumLiteralDeclaration() { return cSMALLERTHANEnumLiteralDeclaration; }

		//"<"
		public Keyword getSMALLERTHANLessThanSignKeyword_0() { return cSMALLERTHANLessThanSignKeyword_0; }
	}

	public class Level4OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Level4Operator");
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cEQUALSEqualsSignEqualsSignKeyword_0 = (Keyword)cEQUALSEnumLiteralDeclaration.eContents().get(0);
		
		//enum Level4Operator returns ListaMM::Operator:
		//	EQUALS="==";
		public EnumRule getRule() { return rule; }

		//EQUALS="=="
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration() { return cEQUALSEnumLiteralDeclaration; }

		//"=="
		public Keyword getEQUALSEqualsSignEqualsSignKeyword_0() { return cEQUALSEqualsSignEqualsSignKeyword_0; }
	}
	
	private ProgramElements pProgram;
	private FunctionDefinitionElements pFunctionDefinition;
	private EvaluationElements pEvaluation;
	private IdentifierElements pIdentifier;
	private ExpressionElements pExpression;
	private Level4ExpressionElements pLevel4Expression;
	private Level3ExpressionElements pLevel3Expression;
	private Level2ExpressionElements pLevel2Expression;
	private Level1ExpressionElements pLevel1Expression;
	private SimpleExpressionElements pSimpleExpression;
	private InputExpressionElements pInputExpression;
	private OutputExpressionElements pOutputExpression;
	private IfExpressionElements pIfExpression;
	private FunctionCallElements pFunctionCall;
	private StringExpressionElements pStringExpression;
	private NotExpressionElements pNotExpression;
	private NumberExpressionElements pNumberExpression;
	private BooleanExpressionElements pBooleanExpression;
	private SeqExpressionElements pSeqExpression;
	private Level1OperatorElements unknownRuleLevel1Operator;
	private Level2OperatorElements unknownRuleLevel2Operator;
	private Level3OperatorElements unknownRuleLevel3Operator;
	private Level4OperatorElements unknownRuleLevel4Operator;
	private MapExpressionElements pMapExpression;
	private PairExprElements pPairExpr;
	private PutExpressionElements pPutExpression;
	private GetExpressionElements pGetExpression;
	private RemoveExpressionElements pRemoveExpression;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ListaGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("edu.upb.lp.Lista".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Program returns ListaMM::Program:
	//	functionDefinitions+=FunctionDefinition* evaluation=Evaluation;
	public ProgramElements getProgramAccess() {
		return (pProgram != null) ? pProgram : (pProgram = new ProgramElements());
	}
	
	public ParserRule getProgramRule() {
		return getProgramAccess().getRule();
	}

	//FunctionDefinition returns ListaMM::FunctionDefinition:
	//	name=ID "(" parameters+=Identifier ("," parameters+=Identifier)* ")" "=" expression=Expression ";";
	public FunctionDefinitionElements getFunctionDefinitionAccess() {
		return (pFunctionDefinition != null) ? pFunctionDefinition : (pFunctionDefinition = new FunctionDefinitionElements());
	}
	
	public ParserRule getFunctionDefinitionRule() {
		return getFunctionDefinitionAccess().getRule();
	}

	//Evaluation returns ListaMM::Evaluation:
	//	"?" expression=Expression ";";
	public EvaluationElements getEvaluationAccess() {
		return (pEvaluation != null) ? pEvaluation : (pEvaluation = new EvaluationElements());
	}
	
	public ParserRule getEvaluationRule() {
		return getEvaluationAccess().getRule();
	}

	//Identifier returns ListaMM::Identifier:
	//	name=ID;
	public IdentifierElements getIdentifierAccess() {
		return (pIdentifier != null) ? pIdentifier : (pIdentifier = new IdentifierElements());
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//Expression returns ListaMM::Expression:
	//	Level4Expression;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Level4Expression returns ListaMM::Expression:
	//	Level3Expression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level4Operator
	//	subExpressions+=Level4Expression)?;
	public Level4ExpressionElements getLevel4ExpressionAccess() {
		return (pLevel4Expression != null) ? pLevel4Expression : (pLevel4Expression = new Level4ExpressionElements());
	}
	
	public ParserRule getLevel4ExpressionRule() {
		return getLevel4ExpressionAccess().getRule();
	}

	//Level3Expression returns ListaMM::Expression:
	//	Level2Expression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level3Operator
	//	subExpressions+=Level3Expression)?;
	public Level3ExpressionElements getLevel3ExpressionAccess() {
		return (pLevel3Expression != null) ? pLevel3Expression : (pLevel3Expression = new Level3ExpressionElements());
	}
	
	public ParserRule getLevel3ExpressionRule() {
		return getLevel3ExpressionAccess().getRule();
	}

	//Level2Expression returns ListaMM::Expression:
	//	Level1Expression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level2Operator
	//	subExpressions+=Level2Expression)?;
	public Level2ExpressionElements getLevel2ExpressionAccess() {
		return (pLevel2Expression != null) ? pLevel2Expression : (pLevel2Expression = new Level2ExpressionElements());
	}
	
	public ParserRule getLevel2ExpressionRule() {
		return getLevel2ExpressionAccess().getRule();
	}

	//Level1Expression returns ListaMM::Expression:
	//	SimpleExpression ({ListaMM::CompositeExpr.subExpressions+=current} operator=Level1Operator
	//	subExpressions+=Level1Expression)?;
	public Level1ExpressionElements getLevel1ExpressionAccess() {
		return (pLevel1Expression != null) ? pLevel1Expression : (pLevel1Expression = new Level1ExpressionElements());
	}
	
	public ParserRule getLevel1ExpressionRule() {
		return getLevel1ExpressionAccess().getRule();
	}

	//SimpleExpression returns ListaMM::Expression:
	//	SeqExpression | BooleanExpression | NumberExpression | StringExpression | FunctionCall | Identifier | IfExpression |
	//	NotExpression | InputExpression | OutputExpression | "(" Expression ")" | MapExpression | PutExpression |
	//	RemoveExpression | GetExpression;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return (pSimpleExpression != null) ? pSimpleExpression : (pSimpleExpression = new SimpleExpressionElements());
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	//InputExpression returns ListaMM::InputExpression:
	//	"input" "(" message=STRING ")";
	public InputExpressionElements getInputExpressionAccess() {
		return (pInputExpression != null) ? pInputExpression : (pInputExpression = new InputExpressionElements());
	}
	
	public ParserRule getInputExpressionRule() {
		return getInputExpressionAccess().getRule();
	}

	//OutputExpression returns ListaMM::OutputExpression:
	//	"output" "(" parameter=Expression ")";
	public OutputExpressionElements getOutputExpressionAccess() {
		return (pOutputExpression != null) ? pOutputExpression : (pOutputExpression = new OutputExpressionElements());
	}
	
	public ParserRule getOutputExpressionRule() {
		return getOutputExpressionAccess().getRule();
	}

	//IfExpression returns ListaMM::IfExpression:
	//	"if" "(" cond=Expression "," consequent=Expression "," alternative=Expression ")";
	public IfExpressionElements getIfExpressionAccess() {
		return (pIfExpression != null) ? pIfExpression : (pIfExpression = new IfExpressionElements());
	}
	
	public ParserRule getIfExpressionRule() {
		return getIfExpressionAccess().getRule();
	}

	//FunctionCall returns ListaMM::FunctionCall:
	//	function=[ListaMM::FunctionDefinition] "(" (arguments+=Expression ("," arguments+=Expression)*)? ")";
	public FunctionCallElements getFunctionCallAccess() {
		return (pFunctionCall != null) ? pFunctionCall : (pFunctionCall = new FunctionCallElements());
	}
	
	public ParserRule getFunctionCallRule() {
		return getFunctionCallAccess().getRule();
	}

	//StringExpression returns ListaMM::StringExpression:
	//	string+=STRING;
	public StringExpressionElements getStringExpressionAccess() {
		return (pStringExpression != null) ? pStringExpression : (pStringExpression = new StringExpressionElements());
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}

	//NotExpression returns ListaMM::NegExpr:
	//	"!" subExpr=SimpleExpression;
	public NotExpressionElements getNotExpressionAccess() {
		return (pNotExpression != null) ? pNotExpression : (pNotExpression = new NotExpressionElements());
	}
	
	public ParserRule getNotExpressionRule() {
		return getNotExpressionAccess().getRule();
	}

	//NumberExpression returns ListaMM::NumberExpression:
	//	number=INT;
	public NumberExpressionElements getNumberExpressionAccess() {
		return (pNumberExpression != null) ? pNumberExpression : (pNumberExpression = new NumberExpressionElements());
	}
	
	public ParserRule getNumberExpressionRule() {
		return getNumberExpressionAccess().getRule();
	}

	//BooleanExpression returns ListaMM::BooleanExpression:
	//	{ListaMM::BooleanExpression} (value?="TRUE" | "FALSE");
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//SeqExpression returns ListaMM::SeqExpression:
	//	"seq" "(" subExpressions+=Expression ("," subExpressions+=Expression)* ")";
	public SeqExpressionElements getSeqExpressionAccess() {
		return (pSeqExpression != null) ? pSeqExpression : (pSeqExpression = new SeqExpressionElements());
	}
	
	public ParserRule getSeqExpressionRule() {
		return getSeqExpressionAccess().getRule();
	}

	////Priorities: mult divide concat > plus minus > smaller > equals
	//enum Level1Operator returns ListaMM::Operator:
	//	TIMES="*" | DIVIDE="/" | CONCAT="::" | AND="&" | OR="|";
	public Level1OperatorElements getLevel1OperatorAccess() {
		return (unknownRuleLevel1Operator != null) ? unknownRuleLevel1Operator : (unknownRuleLevel1Operator = new Level1OperatorElements());
	}
	
	public EnumRule getLevel1OperatorRule() {
		return getLevel1OperatorAccess().getRule();
	}

	//enum Level2Operator returns ListaMM::Operator:
	//	MINUS="-" | PLUS="+";
	public Level2OperatorElements getLevel2OperatorAccess() {
		return (unknownRuleLevel2Operator != null) ? unknownRuleLevel2Operator : (unknownRuleLevel2Operator = new Level2OperatorElements());
	}
	
	public EnumRule getLevel2OperatorRule() {
		return getLevel2OperatorAccess().getRule();
	}

	//enum Level3Operator returns ListaMM::Operator:
	//	SMALLERTHAN="<";
	public Level3OperatorElements getLevel3OperatorAccess() {
		return (unknownRuleLevel3Operator != null) ? unknownRuleLevel3Operator : (unknownRuleLevel3Operator = new Level3OperatorElements());
	}
	
	public EnumRule getLevel3OperatorRule() {
		return getLevel3OperatorAccess().getRule();
	}

	//enum Level4Operator returns ListaMM::Operator:
	//	EQUALS="==";
	public Level4OperatorElements getLevel4OperatorAccess() {
		return (unknownRuleLevel4Operator != null) ? unknownRuleLevel4Operator : (unknownRuleLevel4Operator = new Level4OperatorElements());
	}
	
	public EnumRule getLevel4OperatorRule() {
		return getLevel4OperatorAccess().getRule();
	}

	//MapExpression returns ListaMM::MapExpression:
	//	name=ID "[" keyType=("String" | "Int") "," valueType=("String" | "Int") "]" "=" "{" (values+=PairExpr (","
	//	values+=PairExpr)*)? "}";
	public MapExpressionElements getMapExpressionAccess() {
		return (pMapExpression != null) ? pMapExpression : (pMapExpression = new MapExpressionElements());
	}
	
	public ParserRule getMapExpressionRule() {
		return getMapExpressionAccess().getRule();
	}

	//PairExpr returns ListaMM::Pair:
	//	key=Expression "->" value=Expression;
	public PairExprElements getPairExprAccess() {
		return (pPairExpr != null) ? pPairExpr : (pPairExpr = new PairExprElements());
	}
	
	public ParserRule getPairExprRule() {
		return getPairExprAccess().getRule();
	}

	//PutExpression returns ListaMM::PutExpression:
	//	"put" "(" Map=[ListaMM::MapExpression] "," keyExpr=Expression "," valExpr=Expression ")";
	public PutExpressionElements getPutExpressionAccess() {
		return (pPutExpression != null) ? pPutExpression : (pPutExpression = new PutExpressionElements());
	}
	
	public ParserRule getPutExpressionRule() {
		return getPutExpressionAccess().getRule();
	}

	//GetExpression returns ListaMM::GetExpression:
	//	"get" "(" Map=[ListaMM::MapExpression] "," keyExpr=Expression ")";
	public GetExpressionElements getGetExpressionAccess() {
		return (pGetExpression != null) ? pGetExpression : (pGetExpression = new GetExpressionElements());
	}
	
	public ParserRule getGetExpressionRule() {
		return getGetExpressionAccess().getRule();
	}

	//RemoveExpression returns ListaMM::RemoveExpression:
	//	"remove" "(" Map=[ListaMM::MapExpression] "," keyExpr=Expression ")";
	public RemoveExpressionElements getRemoveExpressionAccess() {
		return (pRemoveExpression != null) ? pRemoveExpression : (pRemoveExpression = new RemoveExpressionElements());
	}
	
	public ParserRule getRemoveExpressionRule() {
		return getRemoveExpressionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
