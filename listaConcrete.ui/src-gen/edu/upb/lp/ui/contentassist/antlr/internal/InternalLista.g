/*
* generated by Xtext
*/
grammar InternalLista;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package edu.upb.lp.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package edu.upb.lp.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import edu.upb.lp.services.ListaGrammarAccess;

}

@parser::members {
 
 	private ListaGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ListaGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleProgram
entryRuleProgram 
:
{ before(grammarAccess.getProgramRule()); }
	 ruleProgram
{ after(grammarAccess.getProgramRule()); } 
	 EOF 
;

// Rule Program
ruleProgram
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getProgramAccess().getGroup()); }
(rule__Program__Group__0)
{ after(grammarAccess.getProgramAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionDefinition
entryRuleFunctionDefinition 
:
{ before(grammarAccess.getFunctionDefinitionRule()); }
	 ruleFunctionDefinition
{ after(grammarAccess.getFunctionDefinitionRule()); } 
	 EOF 
;

// Rule FunctionDefinition
ruleFunctionDefinition
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
(rule__FunctionDefinition__Group__0)
{ after(grammarAccess.getFunctionDefinitionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleEvaluation
entryRuleEvaluation 
:
{ before(grammarAccess.getEvaluationRule()); }
	 ruleEvaluation
{ after(grammarAccess.getEvaluationRule()); } 
	 EOF 
;

// Rule Evaluation
ruleEvaluation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEvaluationAccess().getGroup()); }
(rule__Evaluation__Group__0)
{ after(grammarAccess.getEvaluationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIdentifier
entryRuleIdentifier 
:
{ before(grammarAccess.getIdentifierRule()); }
	 ruleIdentifier
{ after(grammarAccess.getIdentifierRule()); } 
	 EOF 
;

// Rule Identifier
ruleIdentifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIdentifierAccess().getNameAssignment()); }
(rule__Identifier__NameAssignment)
{ after(grammarAccess.getIdentifierAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getLevel4ExpressionParserRuleCall()); }
	ruleLevel4Expression
{ after(grammarAccess.getExpressionAccess().getLevel4ExpressionParserRuleCall()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLevel4Expression
entryRuleLevel4Expression 
:
{ before(grammarAccess.getLevel4ExpressionRule()); }
	 ruleLevel4Expression
{ after(grammarAccess.getLevel4ExpressionRule()); } 
	 EOF 
;

// Rule Level4Expression
ruleLevel4Expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLevel4ExpressionAccess().getGroup()); }
(rule__Level4Expression__Group__0)
{ after(grammarAccess.getLevel4ExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLevel3Expression
entryRuleLevel3Expression 
:
{ before(grammarAccess.getLevel3ExpressionRule()); }
	 ruleLevel3Expression
{ after(grammarAccess.getLevel3ExpressionRule()); } 
	 EOF 
;

// Rule Level3Expression
ruleLevel3Expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLevel3ExpressionAccess().getGroup()); }
(rule__Level3Expression__Group__0)
{ after(grammarAccess.getLevel3ExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLevel2Expression
entryRuleLevel2Expression 
:
{ before(grammarAccess.getLevel2ExpressionRule()); }
	 ruleLevel2Expression
{ after(grammarAccess.getLevel2ExpressionRule()); } 
	 EOF 
;

// Rule Level2Expression
ruleLevel2Expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLevel2ExpressionAccess().getGroup()); }
(rule__Level2Expression__Group__0)
{ after(grammarAccess.getLevel2ExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLevel1Expression
entryRuleLevel1Expression 
:
{ before(grammarAccess.getLevel1ExpressionRule()); }
	 ruleLevel1Expression
{ after(grammarAccess.getLevel1ExpressionRule()); } 
	 EOF 
;

// Rule Level1Expression
ruleLevel1Expression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLevel1ExpressionAccess().getGroup()); }
(rule__Level1Expression__Group__0)
{ after(grammarAccess.getLevel1ExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression 
:
{ before(grammarAccess.getSimpleExpressionRule()); }
	 ruleSimpleExpression
{ after(grammarAccess.getSimpleExpressionRule()); } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSimpleExpressionAccess().getAlternatives()); }
(rule__SimpleExpression__Alternatives)
{ after(grammarAccess.getSimpleExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleInputExpression
entryRuleInputExpression 
:
{ before(grammarAccess.getInputExpressionRule()); }
	 ruleInputExpression
{ after(grammarAccess.getInputExpressionRule()); } 
	 EOF 
;

// Rule InputExpression
ruleInputExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getInputExpressionAccess().getGroup()); }
(rule__InputExpression__Group__0)
{ after(grammarAccess.getInputExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleOutputExpression
entryRuleOutputExpression 
:
{ before(grammarAccess.getOutputExpressionRule()); }
	 ruleOutputExpression
{ after(grammarAccess.getOutputExpressionRule()); } 
	 EOF 
;

// Rule OutputExpression
ruleOutputExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOutputExpressionAccess().getGroup()); }
(rule__OutputExpression__Group__0)
{ after(grammarAccess.getOutputExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleIfExpression
entryRuleIfExpression 
:
{ before(grammarAccess.getIfExpressionRule()); }
	 ruleIfExpression
{ after(grammarAccess.getIfExpressionRule()); } 
	 EOF 
;

// Rule IfExpression
ruleIfExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getIfExpressionAccess().getGroup()); }
(rule__IfExpression__Group__0)
{ after(grammarAccess.getIfExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunctionCall
entryRuleFunctionCall 
:
{ before(grammarAccess.getFunctionCallRule()); }
	 ruleFunctionCall
{ after(grammarAccess.getFunctionCallRule()); } 
	 EOF 
;

// Rule FunctionCall
ruleFunctionCall
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup()); }
(rule__FunctionCall__Group__0)
{ after(grammarAccess.getFunctionCallAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringExpression
entryRuleStringExpression 
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringExpressionAccess().getStringAssignment()); }
(rule__StringExpression__StringAssignment)
{ after(grammarAccess.getStringExpressionAccess().getStringAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNotExpression
entryRuleNotExpression 
:
{ before(grammarAccess.getNotExpressionRule()); }
	 ruleNotExpression
{ after(grammarAccess.getNotExpressionRule()); } 
	 EOF 
;

// Rule NotExpression
ruleNotExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNotExpressionAccess().getGroup()); }
(rule__NotExpression__Group__0)
{ after(grammarAccess.getNotExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNumberExpression
entryRuleNumberExpression 
:
{ before(grammarAccess.getNumberExpressionRule()); }
	 ruleNumberExpression
{ after(grammarAccess.getNumberExpressionRule()); } 
	 EOF 
;

// Rule NumberExpression
ruleNumberExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNumberExpressionAccess().getNumberAssignment()); }
(rule__NumberExpression__NumberAssignment)
{ after(grammarAccess.getNumberExpressionAccess().getNumberAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getGroup()); }
(rule__BooleanExpression__Group__0)
{ after(grammarAccess.getBooleanExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleSeqExpression
entryRuleSeqExpression 
:
{ before(grammarAccess.getSeqExpressionRule()); }
	 ruleSeqExpression
{ after(grammarAccess.getSeqExpressionRule()); } 
	 EOF 
;

// Rule SeqExpression
ruleSeqExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSeqExpressionAccess().getGroup()); }
(rule__SeqExpression__Group__0)
{ after(grammarAccess.getSeqExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleMapExpression
entryRuleMapExpression 
:
{ before(grammarAccess.getMapExpressionRule()); }
	 ruleMapExpression
{ after(grammarAccess.getMapExpressionRule()); } 
	 EOF 
;

// Rule MapExpression
ruleMapExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMapExpressionAccess().getGroup()); }
(rule__MapExpression__Group__0)
{ after(grammarAccess.getMapExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePairExpr
entryRulePairExpr 
:
{ before(grammarAccess.getPairExprRule()); }
	 rulePairExpr
{ after(grammarAccess.getPairExprRule()); } 
	 EOF 
;

// Rule PairExpr
rulePairExpr
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPairExprAccess().getGroup()); }
(rule__PairExpr__Group__0)
{ after(grammarAccess.getPairExprAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePutExpression
entryRulePutExpression 
:
{ before(grammarAccess.getPutExpressionRule()); }
	 rulePutExpression
{ after(grammarAccess.getPutExpressionRule()); } 
	 EOF 
;

// Rule PutExpression
rulePutExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPutExpressionAccess().getGroup()); }
(rule__PutExpression__Group__0)
{ after(grammarAccess.getPutExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleGetExpression
entryRuleGetExpression 
:
{ before(grammarAccess.getGetExpressionRule()); }
	 ruleGetExpression
{ after(grammarAccess.getGetExpressionRule()); } 
	 EOF 
;

// Rule GetExpression
ruleGetExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGetExpressionAccess().getGroup()); }
(rule__GetExpression__Group__0)
{ after(grammarAccess.getGetExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleRemoveExpression
entryRuleRemoveExpression 
:
{ before(grammarAccess.getRemoveExpressionRule()); }
	 ruleRemoveExpression
{ after(grammarAccess.getRemoveExpressionRule()); } 
	 EOF 
;

// Rule RemoveExpression
ruleRemoveExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRemoveExpressionAccess().getGroup()); }
(rule__RemoveExpression__Group__0)
{ after(grammarAccess.getRemoveExpressionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Level1Operator
ruleLevel1Operator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel1OperatorAccess().getAlternatives()); }
(rule__Level1Operator__Alternatives)
{ after(grammarAccess.getLevel1OperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Level2Operator
ruleLevel2Operator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel2OperatorAccess().getAlternatives()); }
(rule__Level2Operator__Alternatives)
{ after(grammarAccess.getLevel2OperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Level3Operator
ruleLevel3Operator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel3OperatorAccess().getSMALLERTHANEnumLiteralDeclaration()); }
(	'<' 
)
{ after(grammarAccess.getLevel3OperatorAccess().getSMALLERTHANEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule Level4Operator
ruleLevel4Operator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel4OperatorAccess().getEQUALSEnumLiteralDeclaration()); }
(	'==' 
)
{ after(grammarAccess.getLevel4OperatorAccess().getEQUALSEnumLiteralDeclaration()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__SimpleExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getSeqExpressionParserRuleCall_0()); }
	ruleSeqExpression
{ after(grammarAccess.getSimpleExpressionAccess().getSeqExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getBooleanExpressionParserRuleCall_1()); }
	ruleBooleanExpression
{ after(grammarAccess.getSimpleExpressionAccess().getBooleanExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getNumberExpressionParserRuleCall_2()); }
	ruleNumberExpression
{ after(grammarAccess.getSimpleExpressionAccess().getNumberExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getStringExpressionParserRuleCall_3()); }
	ruleStringExpression
{ after(grammarAccess.getSimpleExpressionAccess().getStringExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getFunctionCallParserRuleCall_4()); }
	ruleFunctionCall
{ after(grammarAccess.getSimpleExpressionAccess().getFunctionCallParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getIdentifierParserRuleCall_5()); }
	ruleIdentifier
{ after(grammarAccess.getSimpleExpressionAccess().getIdentifierParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getIfExpressionParserRuleCall_6()); }
	ruleIfExpression
{ after(grammarAccess.getSimpleExpressionAccess().getIfExpressionParserRuleCall_6()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getNotExpressionParserRuleCall_7()); }
	ruleNotExpression
{ after(grammarAccess.getSimpleExpressionAccess().getNotExpressionParserRuleCall_7()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getInputExpressionParserRuleCall_8()); }
	ruleInputExpression
{ after(grammarAccess.getSimpleExpressionAccess().getInputExpressionParserRuleCall_8()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getOutputExpressionParserRuleCall_9()); }
	ruleOutputExpression
{ after(grammarAccess.getSimpleExpressionAccess().getOutputExpressionParserRuleCall_9()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getGroup_10()); }
(rule__SimpleExpression__Group_10__0)
{ after(grammarAccess.getSimpleExpressionAccess().getGroup_10()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getMapExpressionParserRuleCall_11()); }
	ruleMapExpression
{ after(grammarAccess.getSimpleExpressionAccess().getMapExpressionParserRuleCall_11()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getPutExpressionParserRuleCall_12()); }
	rulePutExpression
{ after(grammarAccess.getSimpleExpressionAccess().getPutExpressionParserRuleCall_12()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getRemoveExpressionParserRuleCall_13()); }
	ruleRemoveExpression
{ after(grammarAccess.getSimpleExpressionAccess().getRemoveExpressionParserRuleCall_13()); }
)

    |(
{ before(grammarAccess.getSimpleExpressionAccess().getGetExpressionParserRuleCall_14()); }
	ruleGetExpression
{ after(grammarAccess.getSimpleExpressionAccess().getGetExpressionParserRuleCall_14()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Alternatives_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getValueAssignment_1_0()); }
(rule__BooleanExpression__ValueAssignment_1_0)
{ after(grammarAccess.getBooleanExpressionAccess().getValueAssignment_1_0()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getFALSEKeyword_1_1()); }

	'FALSE' 

{ after(grammarAccess.getBooleanExpressionAccess().getFALSEKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__KeyTypeAlternatives_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getKeyTypeStringKeyword_2_0_0()); }

	'String' 

{ after(grammarAccess.getMapExpressionAccess().getKeyTypeStringKeyword_2_0_0()); }
)

    |(
{ before(grammarAccess.getMapExpressionAccess().getKeyTypeIntKeyword_2_0_1()); }

	'Int' 

{ after(grammarAccess.getMapExpressionAccess().getKeyTypeIntKeyword_2_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__ValueTypeAlternatives_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getValueTypeStringKeyword_4_0_0()); }

	'String' 

{ after(grammarAccess.getMapExpressionAccess().getValueTypeStringKeyword_4_0_0()); }
)

    |(
{ before(grammarAccess.getMapExpressionAccess().getValueTypeIntKeyword_4_0_1()); }

	'Int' 

{ after(grammarAccess.getMapExpressionAccess().getValueTypeIntKeyword_4_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Level1Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel1OperatorAccess().getTIMESEnumLiteralDeclaration_0()); }
(	'*' 
)
{ after(grammarAccess.getLevel1OperatorAccess().getTIMESEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getLevel1OperatorAccess().getDIVIDEEnumLiteralDeclaration_1()); }
(	'/' 
)
{ after(grammarAccess.getLevel1OperatorAccess().getDIVIDEEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getLevel1OperatorAccess().getCONCATEnumLiteralDeclaration_2()); }
(	'::' 
)
{ after(grammarAccess.getLevel1OperatorAccess().getCONCATEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getLevel1OperatorAccess().getANDEnumLiteralDeclaration_3()); }
(	'&' 
)
{ after(grammarAccess.getLevel1OperatorAccess().getANDEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getLevel1OperatorAccess().getOREnumLiteralDeclaration_4()); }
(	'|' 
)
{ after(grammarAccess.getLevel1OperatorAccess().getOREnumLiteralDeclaration_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Level2Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel2OperatorAccess().getMINUSEnumLiteralDeclaration_0()); }
(	'-' 
)
{ after(grammarAccess.getLevel2OperatorAccess().getMINUSEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getLevel2OperatorAccess().getPLUSEnumLiteralDeclaration_1()); }
(	'+' 
)
{ after(grammarAccess.getLevel2OperatorAccess().getPLUSEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Program__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__0__Impl
	rule__Program__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getFunctionDefinitionsAssignment_0()); }
(rule__Program__FunctionDefinitionsAssignment_0)*
{ after(grammarAccess.getProgramAccess().getFunctionDefinitionsAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Program__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Program__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Program__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getEvaluationAssignment_1()); }
(rule__Program__EvaluationAssignment_1)
{ after(grammarAccess.getProgramAccess().getEvaluationAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionDefinition__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__0__Impl
	rule__FunctionDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_0()); }
(rule__FunctionDefinition__NameAssignment_0)
{ after(grammarAccess.getFunctionDefinitionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__1__Impl
	rule__FunctionDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionDefinitionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__2__Impl
	rule__FunctionDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParametersAssignment_2()); }
(rule__FunctionDefinition__ParametersAssignment_2)
{ after(grammarAccess.getFunctionDefinitionAccess().getParametersAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__3__Impl
	rule__FunctionDefinition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getGroup_3()); }
(rule__FunctionDefinition__Group_3__0)*
{ after(grammarAccess.getFunctionDefinitionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__4__Impl
	rule__FunctionDefinition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getFunctionDefinitionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__5__Impl
	rule__FunctionDefinition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getEqualsSignKeyword_5()); }

	'=' 

{ after(grammarAccess.getFunctionDefinitionAccess().getEqualsSignKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__6__Impl
	rule__FunctionDefinition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getExpressionAssignment_6()); }
(rule__FunctionDefinition__ExpressionAssignment_6)
{ after(grammarAccess.getFunctionDefinitionAccess().getExpressionAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_7()); }

	';' 

{ after(grammarAccess.getFunctionDefinitionAccess().getSemicolonKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__FunctionDefinition__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_3__0__Impl
	rule__FunctionDefinition__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getFunctionDefinitionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionDefinition__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionDefinition__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParametersAssignment_3_1()); }
(rule__FunctionDefinition__ParametersAssignment_3_1)
{ after(grammarAccess.getFunctionDefinitionAccess().getParametersAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Evaluation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluation__Group__0__Impl
	rule__Evaluation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getEvaluationAccess().getQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluation__Group__1__Impl
	rule__Evaluation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getExpressionAssignment_1()); }
(rule__Evaluation__ExpressionAssignment_1)
{ after(grammarAccess.getEvaluationAccess().getExpressionAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Evaluation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Evaluation__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getSemicolonKeyword_2()); }

	';' 

{ after(grammarAccess.getEvaluationAccess().getSemicolonKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Level4Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level4Expression__Group__0__Impl
	rule__Level4Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Level4Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel4ExpressionAccess().getLevel3ExpressionParserRuleCall_0()); }
	ruleLevel3Expression
{ after(grammarAccess.getLevel4ExpressionAccess().getLevel3ExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level4Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level4Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Level4Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel4ExpressionAccess().getGroup_1()); }
(rule__Level4Expression__Group_1__0)?
{ after(grammarAccess.getLevel4ExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Level4Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level4Expression__Group_1__0__Impl
	rule__Level4Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Level4Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel4ExpressionAccess().getCompositeExprSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getLevel4ExpressionAccess().getCompositeExprSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level4Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level4Expression__Group_1__1__Impl
	rule__Level4Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Level4Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel4ExpressionAccess().getOperatorAssignment_1_1()); }
(rule__Level4Expression__OperatorAssignment_1_1)
{ after(grammarAccess.getLevel4ExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level4Expression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level4Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Level4Expression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel4ExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__Level4Expression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getLevel4ExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Level3Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level3Expression__Group__0__Impl
	rule__Level3Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Level3Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel3ExpressionAccess().getLevel2ExpressionParserRuleCall_0()); }
	ruleLevel2Expression
{ after(grammarAccess.getLevel3ExpressionAccess().getLevel2ExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level3Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level3Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Level3Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel3ExpressionAccess().getGroup_1()); }
(rule__Level3Expression__Group_1__0)?
{ after(grammarAccess.getLevel3ExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Level3Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level3Expression__Group_1__0__Impl
	rule__Level3Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Level3Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel3ExpressionAccess().getCompositeExprSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getLevel3ExpressionAccess().getCompositeExprSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level3Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level3Expression__Group_1__1__Impl
	rule__Level3Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Level3Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel3ExpressionAccess().getOperatorAssignment_1_1()); }
(rule__Level3Expression__OperatorAssignment_1_1)
{ after(grammarAccess.getLevel3ExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level3Expression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level3Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Level3Expression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel3ExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__Level3Expression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getLevel3ExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Level2Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level2Expression__Group__0__Impl
	rule__Level2Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Level2Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel2ExpressionAccess().getLevel1ExpressionParserRuleCall_0()); }
	ruleLevel1Expression
{ after(grammarAccess.getLevel2ExpressionAccess().getLevel1ExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level2Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level2Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Level2Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel2ExpressionAccess().getGroup_1()); }
(rule__Level2Expression__Group_1__0)?
{ after(grammarAccess.getLevel2ExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Level2Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level2Expression__Group_1__0__Impl
	rule__Level2Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Level2Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel2ExpressionAccess().getCompositeExprSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getLevel2ExpressionAccess().getCompositeExprSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level2Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level2Expression__Group_1__1__Impl
	rule__Level2Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Level2Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel2ExpressionAccess().getOperatorAssignment_1_1()); }
(rule__Level2Expression__OperatorAssignment_1_1)
{ after(grammarAccess.getLevel2ExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level2Expression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level2Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Level2Expression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel2ExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__Level2Expression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getLevel2ExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Level1Expression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level1Expression__Group__0__Impl
	rule__Level1Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Level1Expression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel1ExpressionAccess().getSimpleExpressionParserRuleCall_0()); }
	ruleSimpleExpression
{ after(grammarAccess.getLevel1ExpressionAccess().getSimpleExpressionParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level1Expression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level1Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Level1Expression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel1ExpressionAccess().getGroup_1()); }
(rule__Level1Expression__Group_1__0)?
{ after(grammarAccess.getLevel1ExpressionAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Level1Expression__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level1Expression__Group_1__0__Impl
	rule__Level1Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Level1Expression__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel1ExpressionAccess().getCompositeExprSubExpressionsAction_1_0()); }
(

)
{ after(grammarAccess.getLevel1ExpressionAccess().getCompositeExprSubExpressionsAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level1Expression__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level1Expression__Group_1__1__Impl
	rule__Level1Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Level1Expression__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel1ExpressionAccess().getOperatorAssignment_1_1()); }
(rule__Level1Expression__OperatorAssignment_1_1)
{ after(grammarAccess.getLevel1ExpressionAccess().getOperatorAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Level1Expression__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Level1Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Level1Expression__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel1ExpressionAccess().getSubExpressionsAssignment_1_2()); }
(rule__Level1Expression__SubExpressionsAssignment_1_2)
{ after(grammarAccess.getLevel1ExpressionAccess().getSubExpressionsAssignment_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SimpleExpression__Group_10__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_10__0__Impl
	rule__SimpleExpression__Group_10__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_10__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getLeftParenthesisKeyword_10_0()); }

	'(' 

{ after(grammarAccess.getSimpleExpressionAccess().getLeftParenthesisKeyword_10_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_10__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_10__1__Impl
	rule__SimpleExpression__Group_10__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_10__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getExpressionParserRuleCall_10_1()); }
	ruleExpression
{ after(grammarAccess.getSimpleExpressionAccess().getExpressionParserRuleCall_10_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SimpleExpression__Group_10__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SimpleExpression__Group_10__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SimpleExpression__Group_10__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSimpleExpressionAccess().getRightParenthesisKeyword_10_2()); }

	')' 

{ after(grammarAccess.getSimpleExpressionAccess().getRightParenthesisKeyword_10_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__InputExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputExpression__Group__0__Impl
	rule__InputExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__InputExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputExpressionAccess().getInputKeyword_0()); }

	'input' 

{ after(grammarAccess.getInputExpressionAccess().getInputKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputExpression__Group__1__Impl
	rule__InputExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__InputExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getInputExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputExpression__Group__2__Impl
	rule__InputExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__InputExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputExpressionAccess().getMessageAssignment_2()); }
(rule__InputExpression__MessageAssignment_2)
{ after(grammarAccess.getInputExpressionAccess().getMessageAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__InputExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__InputExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__InputExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getInputExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__OutputExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputExpression__Group__0__Impl
	rule__OutputExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputExpressionAccess().getOutputKeyword_0()); }

	'output' 

{ after(grammarAccess.getOutputExpressionAccess().getOutputKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputExpression__Group__1__Impl
	rule__OutputExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getOutputExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputExpression__Group__2__Impl
	rule__OutputExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputExpressionAccess().getParameterAssignment_2()); }
(rule__OutputExpression__ParameterAssignment_2)
{ after(grammarAccess.getOutputExpressionAccess().getParameterAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__OutputExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__OutputExpression__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__OutputExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputExpressionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getOutputExpressionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__IfExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__0__Impl
	rule__IfExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getIfKeyword_0()); }

	'if' 

{ after(grammarAccess.getIfExpressionAccess().getIfKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__1__Impl
	rule__IfExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getIfExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__2__Impl
	rule__IfExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getCondAssignment_2()); }
(rule__IfExpression__CondAssignment_2)
{ after(grammarAccess.getIfExpressionAccess().getCondAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__3__Impl
	rule__IfExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getIfExpressionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__4__Impl
	rule__IfExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getConsequentAssignment_4()); }
(rule__IfExpression__ConsequentAssignment_4)
{ after(grammarAccess.getIfExpressionAccess().getConsequentAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__5__Impl
	rule__IfExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getIfExpressionAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__6__Impl
	rule__IfExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getAlternativeAssignment_6()); }
(rule__IfExpression__AlternativeAssignment_6)
{ after(grammarAccess.getIfExpressionAccess().getAlternativeAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__IfExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__IfExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getIfExpressionAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__FunctionCall__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__0__Impl
	rule__FunctionCall__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0()); }
(rule__FunctionCall__FunctionAssignment_0)
{ after(grammarAccess.getFunctionCallAccess().getFunctionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__1__Impl
	rule__FunctionCall__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionCallAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__2__Impl
	rule__FunctionCall__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_2()); }
(rule__FunctionCall__Group_2__0)?
{ after(grammarAccess.getFunctionCallAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionCallAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__FunctionCall__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2__0__Impl
	rule__FunctionCall__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_0()); }
(rule__FunctionCall__ArgumentsAssignment_2_0)
{ after(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getGroup_2_1()); }
(rule__FunctionCall__Group_2_1__0)*
{ after(grammarAccess.getFunctionCallAccess().getGroup_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__FunctionCall__Group_2_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_1__0__Impl
	rule__FunctionCall__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0()); }

	',' 

{ after(grammarAccess.getFunctionCallAccess().getCommaKeyword_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__FunctionCall__Group_2_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__FunctionCall__Group_2_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__Group_2_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_1_1()); }
(rule__FunctionCall__ArgumentsAssignment_2_1_1)
{ after(grammarAccess.getFunctionCallAccess().getArgumentsAssignment_2_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__NotExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__0__Impl
	rule__NotExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0()); }

	'!' 

{ after(grammarAccess.getNotExpressionAccess().getExclamationMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__NotExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__NotExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getSubExprAssignment_1()); }
(rule__NotExpression__SubExprAssignment_1)
{ after(grammarAccess.getNotExpressionAccess().getSubExprAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__BooleanExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanExpression__Group__0__Impl
	rule__BooleanExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getBooleanExpressionAction_0()); }
(

)
{ after(grammarAccess.getBooleanExpressionAccess().getBooleanExpressionAction_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__BooleanExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__BooleanExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getAlternatives_1()); }
(rule__BooleanExpression__Alternatives_1)
{ after(grammarAccess.getBooleanExpressionAccess().getAlternatives_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__SeqExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqExpression__Group__0__Impl
	rule__SeqExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqExpressionAccess().getSeqKeyword_0()); }

	'seq' 

{ after(grammarAccess.getSeqExpressionAccess().getSeqKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeqExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqExpression__Group__1__Impl
	rule__SeqExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getSeqExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeqExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqExpression__Group__2__Impl
	rule__SeqExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqExpressionAccess().getSubExpressionsAssignment_2()); }
(rule__SeqExpression__SubExpressionsAssignment_2)
{ after(grammarAccess.getSeqExpressionAccess().getSubExpressionsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeqExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqExpression__Group__3__Impl
	rule__SeqExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqExpressionAccess().getGroup_3()); }
(rule__SeqExpression__Group_3__0)*
{ after(grammarAccess.getSeqExpressionAccess().getGroup_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeqExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqExpression__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqExpressionAccess().getRightParenthesisKeyword_4()); }

	')' 

{ after(grammarAccess.getSeqExpressionAccess().getRightParenthesisKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__SeqExpression__Group_3__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqExpression__Group_3__0__Impl
	rule__SeqExpression__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqExpression__Group_3__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqExpressionAccess().getCommaKeyword_3_0()); }

	',' 

{ after(grammarAccess.getSeqExpressionAccess().getCommaKeyword_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeqExpression__Group_3__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeqExpression__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SeqExpression__Group_3__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqExpressionAccess().getSubExpressionsAssignment_3_1()); }
(rule__SeqExpression__SubExpressionsAssignment_3_1)
{ after(grammarAccess.getSeqExpressionAccess().getSubExpressionsAssignment_3_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MapExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group__0__Impl
	rule__MapExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getNameAssignment_0()); }
(rule__MapExpression__NameAssignment_0)
{ after(grammarAccess.getMapExpressionAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group__1__Impl
	rule__MapExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getMapExpressionAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group__2__Impl
	rule__MapExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getKeyTypeAssignment_2()); }
(rule__MapExpression__KeyTypeAssignment_2)
{ after(grammarAccess.getMapExpressionAccess().getKeyTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group__3__Impl
	rule__MapExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getMapExpressionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group__4__Impl
	rule__MapExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getValueTypeAssignment_4()); }
(rule__MapExpression__ValueTypeAssignment_4)
{ after(grammarAccess.getMapExpressionAccess().getValueTypeAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group__5__Impl
	rule__MapExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getRightSquareBracketKeyword_5()); }

	']' 

{ after(grammarAccess.getMapExpressionAccess().getRightSquareBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group__6__Impl
	rule__MapExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getEqualsSignKeyword_6()); }

	'=' 

{ after(grammarAccess.getMapExpressionAccess().getEqualsSignKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group__7__Impl
	rule__MapExpression__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getLeftCurlyBracketKeyword_7()); }

	'{' 

{ after(grammarAccess.getMapExpressionAccess().getLeftCurlyBracketKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group__8
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group__8__Impl
	rule__MapExpression__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group__8__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getGroup_8()); }
(rule__MapExpression__Group_8__0)?
{ after(grammarAccess.getMapExpressionAccess().getGroup_8()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group__9
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group__9__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getRightCurlyBracketKeyword_9()); }

	'}' 

{ after(grammarAccess.getMapExpressionAccess().getRightCurlyBracketKeyword_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}






















rule__MapExpression__Group_8__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group_8__0__Impl
	rule__MapExpression__Group_8__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group_8__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getValuesAssignment_8_0()); }
(rule__MapExpression__ValuesAssignment_8_0)
{ after(grammarAccess.getMapExpressionAccess().getValuesAssignment_8_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group_8__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group_8__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group_8__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getGroup_8_1()); }
(rule__MapExpression__Group_8_1__0)*
{ after(grammarAccess.getMapExpressionAccess().getGroup_8_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MapExpression__Group_8_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group_8_1__0__Impl
	rule__MapExpression__Group_8_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group_8_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getCommaKeyword_8_1_0()); }

	',' 

{ after(grammarAccess.getMapExpressionAccess().getCommaKeyword_8_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MapExpression__Group_8_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MapExpression__Group_8_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__Group_8_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getValuesAssignment_8_1_1()); }
(rule__MapExpression__ValuesAssignment_8_1_1)
{ after(grammarAccess.getMapExpressionAccess().getValuesAssignment_8_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__PairExpr__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PairExpr__Group__0__Impl
	rule__PairExpr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PairExpr__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairExprAccess().getKeyAssignment_0()); }
(rule__PairExpr__KeyAssignment_0)
{ after(grammarAccess.getPairExprAccess().getKeyAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PairExpr__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PairExpr__Group__1__Impl
	rule__PairExpr__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PairExpr__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairExprAccess().getHyphenMinusGreaterThanSignKeyword_1()); }

	'->' 

{ after(grammarAccess.getPairExprAccess().getHyphenMinusGreaterThanSignKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PairExpr__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PairExpr__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PairExpr__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairExprAccess().getValueAssignment_2()); }
(rule__PairExpr__ValueAssignment_2)
{ after(grammarAccess.getPairExprAccess().getValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__PutExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutExpression__Group__0__Impl
	rule__PutExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getPutKeyword_0()); }

	'put' 

{ after(grammarAccess.getPutExpressionAccess().getPutKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutExpression__Group__1__Impl
	rule__PutExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getPutExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutExpression__Group__2__Impl
	rule__PutExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getMapAssignment_2()); }
(rule__PutExpression__MapAssignment_2)
{ after(grammarAccess.getPutExpressionAccess().getMapAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutExpression__Group__3__Impl
	rule__PutExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getPutExpressionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutExpression__Group__4__Impl
	rule__PutExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getKeyExprAssignment_4()); }
(rule__PutExpression__KeyExprAssignment_4)
{ after(grammarAccess.getPutExpressionAccess().getKeyExprAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutExpression__Group__5__Impl
	rule__PutExpression__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getCommaKeyword_5()); }

	',' 

{ after(grammarAccess.getPutExpressionAccess().getCommaKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutExpression__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutExpression__Group__6__Impl
	rule__PutExpression__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getValExprAssignment_6()); }
(rule__PutExpression__ValExprAssignment_6)
{ after(grammarAccess.getPutExpressionAccess().getValExprAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PutExpression__Group__7
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PutExpression__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__Group__7__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getRightParenthesisKeyword_7()); }

	')' 

{ after(grammarAccess.getPutExpressionAccess().getRightParenthesisKeyword_7()); }
)

;
finally {
	restoreStackSize(stackSize);
}


















rule__GetExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetExpression__Group__0__Impl
	rule__GetExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GetExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetExpressionAccess().getGetKeyword_0()); }

	'get' 

{ after(grammarAccess.getGetExpressionAccess().getGetKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetExpression__Group__1__Impl
	rule__GetExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__GetExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getGetExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetExpression__Group__2__Impl
	rule__GetExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__GetExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetExpressionAccess().getMapAssignment_2()); }
(rule__GetExpression__MapAssignment_2)
{ after(grammarAccess.getGetExpressionAccess().getMapAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetExpression__Group__3__Impl
	rule__GetExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__GetExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetExpressionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getGetExpressionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetExpression__Group__4__Impl
	rule__GetExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__GetExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetExpressionAccess().getKeyExprAssignment_4()); }
(rule__GetExpression__KeyExprAssignment_4)
{ after(grammarAccess.getGetExpressionAccess().getKeyExprAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GetExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GetExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GetExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetExpressionAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getGetExpressionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__RemoveExpression__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RemoveExpression__Group__0__Impl
	rule__RemoveExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveExpression__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRemoveExpressionAccess().getRemoveKeyword_0()); }

	'remove' 

{ after(grammarAccess.getRemoveExpressionAccess().getRemoveKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveExpression__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RemoveExpression__Group__1__Impl
	rule__RemoveExpression__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveExpression__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRemoveExpressionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getRemoveExpressionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveExpression__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RemoveExpression__Group__2__Impl
	rule__RemoveExpression__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveExpression__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRemoveExpressionAccess().getMapAssignment_2()); }
(rule__RemoveExpression__MapAssignment_2)
{ after(grammarAccess.getRemoveExpressionAccess().getMapAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveExpression__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RemoveExpression__Group__3__Impl
	rule__RemoveExpression__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveExpression__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRemoveExpressionAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getRemoveExpressionAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveExpression__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RemoveExpression__Group__4__Impl
	rule__RemoveExpression__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveExpression__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRemoveExpressionAccess().getKeyExprAssignment_4()); }
(rule__RemoveExpression__KeyExprAssignment_4)
{ after(grammarAccess.getRemoveExpressionAccess().getKeyExprAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RemoveExpression__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RemoveExpression__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveExpression__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRemoveExpressionAccess().getRightParenthesisKeyword_5()); }

	')' 

{ after(grammarAccess.getRemoveExpressionAccess().getRightParenthesisKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}















rule__Program__FunctionDefinitionsAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getFunctionDefinitionsFunctionDefinitionParserRuleCall_0_0()); }
	ruleFunctionDefinition{ after(grammarAccess.getProgramAccess().getFunctionDefinitionsFunctionDefinitionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Program__EvaluationAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProgramAccess().getEvaluationEvaluationParserRuleCall_1_0()); }
	ruleEvaluation{ after(grammarAccess.getProgramAccess().getEvaluationEvaluationParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionDefinitionAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ParametersAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParametersIdentifierParserRuleCall_2_0()); }
	ruleIdentifier{ after(grammarAccess.getFunctionDefinitionAccess().getParametersIdentifierParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ParametersAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getParametersIdentifierParserRuleCall_3_1_0()); }
	ruleIdentifier{ after(grammarAccess.getFunctionDefinitionAccess().getParametersIdentifierParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionDefinition__ExpressionAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionDefinitionAccess().getExpressionExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getFunctionDefinitionAccess().getExpressionExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Evaluation__ExpressionAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEvaluationAccess().getExpressionExpressionParserRuleCall_1_0()); }
	ruleExpression{ after(grammarAccess.getEvaluationAccess().getExpressionExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Identifier__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIdentifierAccess().getNameIDTerminalRuleCall_0()); }
	RULE_ID{ after(grammarAccess.getIdentifierAccess().getNameIDTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Level4Expression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel4ExpressionAccess().getOperatorLevel4OperatorEnumRuleCall_1_1_0()); }
	ruleLevel4Operator{ after(grammarAccess.getLevel4ExpressionAccess().getOperatorLevel4OperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Level4Expression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel4ExpressionAccess().getSubExpressionsLevel4ExpressionParserRuleCall_1_2_0()); }
	ruleLevel4Expression{ after(grammarAccess.getLevel4ExpressionAccess().getSubExpressionsLevel4ExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Level3Expression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel3ExpressionAccess().getOperatorLevel3OperatorEnumRuleCall_1_1_0()); }
	ruleLevel3Operator{ after(grammarAccess.getLevel3ExpressionAccess().getOperatorLevel3OperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Level3Expression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel3ExpressionAccess().getSubExpressionsLevel3ExpressionParserRuleCall_1_2_0()); }
	ruleLevel3Expression{ after(grammarAccess.getLevel3ExpressionAccess().getSubExpressionsLevel3ExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Level2Expression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel2ExpressionAccess().getOperatorLevel2OperatorEnumRuleCall_1_1_0()); }
	ruleLevel2Operator{ after(grammarAccess.getLevel2ExpressionAccess().getOperatorLevel2OperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Level2Expression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel2ExpressionAccess().getSubExpressionsLevel2ExpressionParserRuleCall_1_2_0()); }
	ruleLevel2Expression{ after(grammarAccess.getLevel2ExpressionAccess().getSubExpressionsLevel2ExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Level1Expression__OperatorAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel1ExpressionAccess().getOperatorLevel1OperatorEnumRuleCall_1_1_0()); }
	ruleLevel1Operator{ after(grammarAccess.getLevel1ExpressionAccess().getOperatorLevel1OperatorEnumRuleCall_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Level1Expression__SubExpressionsAssignment_1_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLevel1ExpressionAccess().getSubExpressionsLevel1ExpressionParserRuleCall_1_2_0()); }
	ruleLevel1Expression{ after(grammarAccess.getLevel1ExpressionAccess().getSubExpressionsLevel1ExpressionParserRuleCall_1_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__InputExpression__MessageAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getInputExpressionAccess().getMessageSTRINGTerminalRuleCall_2_0()); }
	RULE_STRING{ after(grammarAccess.getInputExpressionAccess().getMessageSTRINGTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OutputExpression__ParameterAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOutputExpressionAccess().getParameterExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getOutputExpressionAccess().getParameterExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__CondAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getCondExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getCondExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__ConsequentAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getConsequentExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getConsequentExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__IfExpression__AlternativeAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getIfExpressionAccess().getAlternativeExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getIfExpressionAccess().getAlternativeExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__FunctionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionFunctionDefinitionCrossReference_0_0()); }
(
{ before(grammarAccess.getFunctionCallAccess().getFunctionFunctionDefinitionIDTerminalRuleCall_0_0_1()); }
	RULE_ID{ after(grammarAccess.getFunctionCallAccess().getFunctionFunctionDefinitionIDTerminalRuleCall_0_0_1()); }
)
{ after(grammarAccess.getFunctionCallAccess().getFunctionFunctionDefinitionCrossReference_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgumentsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_2_0_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__FunctionCall__ArgumentsAssignment_2_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); }
	ruleExpression{ after(grammarAccess.getFunctionCallAccess().getArgumentsExpressionParserRuleCall_2_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__StringAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringExpressionAccess().getStringSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringExpressionAccess().getStringSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NotExpression__SubExprAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNotExpressionAccess().getSubExprSimpleExpressionParserRuleCall_1_0()); }
	ruleSimpleExpression{ after(grammarAccess.getNotExpressionAccess().getSubExprSimpleExpressionParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NumberExpression__NumberAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNumberExpressionAccess().getNumberINTTerminalRuleCall_0()); }
	RULE_INT{ after(grammarAccess.getNumberExpressionAccess().getNumberINTTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__ValueAssignment_1_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getValueTRUEKeyword_1_0_0()); }
(
{ before(grammarAccess.getBooleanExpressionAccess().getValueTRUEKeyword_1_0_0()); }

	'TRUE' 

{ after(grammarAccess.getBooleanExpressionAccess().getValueTRUEKeyword_1_0_0()); }
)

{ after(grammarAccess.getBooleanExpressionAccess().getValueTRUEKeyword_1_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeqExpression__SubExpressionsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqExpressionAccess().getSubExpressionsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getSeqExpressionAccess().getSubExpressionsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__SeqExpression__SubExpressionsAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeqExpressionAccess().getSubExpressionsExpressionParserRuleCall_3_1_0()); }
	ruleExpression{ after(grammarAccess.getSeqExpressionAccess().getSubExpressionsExpressionParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getMapExpressionAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__KeyTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getKeyTypeAlternatives_2_0()); }
(rule__MapExpression__KeyTypeAlternatives_2_0)
{ after(grammarAccess.getMapExpressionAccess().getKeyTypeAlternatives_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__ValueTypeAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getValueTypeAlternatives_4_0()); }
(rule__MapExpression__ValueTypeAlternatives_4_0)
{ after(grammarAccess.getMapExpressionAccess().getValueTypeAlternatives_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__ValuesAssignment_8_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getValuesPairExprParserRuleCall_8_0_0()); }
	rulePairExpr{ after(grammarAccess.getMapExpressionAccess().getValuesPairExprParserRuleCall_8_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MapExpression__ValuesAssignment_8_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMapExpressionAccess().getValuesPairExprParserRuleCall_8_1_1_0()); }
	rulePairExpr{ after(grammarAccess.getMapExpressionAccess().getValuesPairExprParserRuleCall_8_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PairExpr__KeyAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairExprAccess().getKeyExpressionParserRuleCall_0_0()); }
	ruleExpression{ after(grammarAccess.getPairExprAccess().getKeyExpressionParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PairExpr__ValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPairExprAccess().getValueExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getPairExprAccess().getValueExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__MapAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getMapMapExpressionCrossReference_2_0()); }
(
{ before(grammarAccess.getPutExpressionAccess().getMapMapExpressionIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getPutExpressionAccess().getMapMapExpressionIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getPutExpressionAccess().getMapMapExpressionCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__KeyExprAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getKeyExprExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getPutExpressionAccess().getKeyExprExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PutExpression__ValExprAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPutExpressionAccess().getValExprExpressionParserRuleCall_6_0()); }
	ruleExpression{ after(grammarAccess.getPutExpressionAccess().getValExprExpressionParserRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetExpression__MapAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetExpressionAccess().getMapMapExpressionCrossReference_2_0()); }
(
{ before(grammarAccess.getGetExpressionAccess().getMapMapExpressionIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getGetExpressionAccess().getMapMapExpressionIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getGetExpressionAccess().getMapMapExpressionCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GetExpression__KeyExprAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGetExpressionAccess().getKeyExprExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getGetExpressionAccess().getKeyExprExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveExpression__MapAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRemoveExpressionAccess().getMapMapExpressionCrossReference_2_0()); }
(
{ before(grammarAccess.getRemoveExpressionAccess().getMapMapExpressionIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getRemoveExpressionAccess().getMapMapExpressionIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getRemoveExpressionAccess().getMapMapExpressionCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RemoveExpression__KeyExprAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRemoveExpressionAccess().getKeyExprExpressionParserRuleCall_4_0()); }
	ruleExpression{ after(grammarAccess.getRemoveExpressionAccess().getKeyExprExpressionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


